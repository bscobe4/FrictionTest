#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_MS_PWMServoDriver.h"
#include <SPI.h>
#include <SD.h>


#define LED_Pin           13    //Pin for signal LED
#define servPotWip        A0   //Pin for actuator potentiometer wiper
#define recordPin         2  //Pin to start recordingdata or automatic test
#define testSwitch        4  //Pin toggled low/high to determine whether manual or automatic test is executed
#define armPin            3  //Pin to arm test rig
#define LC_P              A2 //Load cell positive input
#define LC_N              A1 //Load cell negative input
#define automatic         1
#define manual            0

#define motorFreq   1600
#define motorPWM    20   //0 to 255
#define potWipMax   3550
#define potWipMin   420  //pot wiper reading to indicate minimum position (actually 398, but needs a buffer)

const int chipSelect = 10;

Adafruit_MotorShield AFMS = Adafruit_MotorShield(); //Create motor shield object
Adafruit_DCMotor *linearActuator = AFMS.getMotor(1); //Select motor on M1 port

unsigned short LA_Pos = 0;
bool whichTest = LOW; //If low, manual test. If high, automatic test.

void setup() {
  // put your setup code here, to run once:

  
  analogReadResolution(12);
  pinMode(armPin, INPUT);
  pinMode(testSwitch, INPUT);
  pinMode(recordPin, INPUT);
  pinMode(LED_Pin, OUTPUT);
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  Serial.print("Initializing SD card...");

  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println("Card failed, or not present");
    // don't do anything more:
    while (1);
  }
  Serial.println("card initialized.");

  AFMS.begin(motorFreq, NULL);
  linearActuator -> setSpeed(motorPWM);

}

void loop() {
  
  bool Armed = false;

  bool record = false;
  
  //Arm Test rig
  while(Armed == false){
    if (digitalRead(armPin) == HIGH){
      Armed = true;
      SD.remove("datalog.txt");
      Serial.println("Armed");
    }
    else{
      delay(1);
    }
  }  

  //Wait for recordPin to be high
  while(record == false){
    if (digitalRead(recordPin) == HIGH){
        whichTest = digitalRead(testSwitch);
        //Serial.println(whichTest);

        record = true;
        Serial.println("recording");
        
        switch(whichTest){
          case manual: 
            Serial.println("manual");
            manualTest();
          break;
      
          case automatic:
            Serial.println("automatic");
            automaticTest();
          break;
      
          default:
          Serial.println("no case");
          break;
      }
    }
    else{
      delay(1);
    }
  }
  
  //LA_Pos = analogRead(servPotWip);
  //Serial.println(LA_Pos);
  /*if(LA_Pos > 4000){
    linearActuator -> run(BACKWARD);
  }
  if(LA_Pos < 1000){
    linearActuator -> run(FORWARD);
  }*/
}

void manualTest(){
  

  //flash LED when starting to log data
    analogWrite(LED_Pin, HIGH);
    Serial.println("LED High");
  
  //Start logging data
    RDATA();

  //finish logging when memory full
    analogWrite(LED_Pin, LOW);
    Serial.println("Finished");
  //Dump to Computer
}

void automaticTest(){

  //flash LED when starting to log data
    analogWrite(LED_Pin, HIGH);
    Serial.println("LED High");

  //start motor to tighten string and start test
  linearActuator -> run(BACKWARD); //Actually forward,assuming red wire 

  //start reading data immediately, stop when it plateues
  RDATA();

  //finish logging when memory full
  analogWrite(LED_Pin, LOW);
  Serial.println("Finished");

  //Restore Actuator to starting position
  linearActuator -> run(FORWARD);
  Serial.println("Rewinding actuator, please wait.");

  unsigned long potWipe = analogRead(servPotWip);
  while(potWipe > potWipMin){
      potWipe = analogRead(servPotWip);
      delay(1); 
  }
  
  linearActuator -> run(RELEASE);
  Serial.println("Actuator position reset.");
}

void RDATA(){

  String dataString = "";
  unsigned long timeRef = micros();
  unsigned long timeNow = 0;
  unsigned long timeThen = 0;
  unsigned long deltaTime = 0;
  while(timeNow <= timeRef + 10000000){
    timeThen = timeNow;
    timeNow = micros();
    deltaTime = timeNow - timeThen;
    dataString = analogRead(LC_P) - analogRead(LC_N);
    File dataFile = SD.open("datalog.txt", FILE_WRITE);
  
    // if the file is available, write to it:
    if (dataFile) {
      dataFile.println(dataString);
      dataFile.print("Delta Time: ");
      dataFile.println(deltaTime);
      //dataFile.println("\n");*/
      dataFile.close();
      // print to the serial port too:
      /*Serial.println(dataString);

      Serial.print("\nDelta Time: ");
      Serial.println(deltaTime);
      Serial.println("\n");*/
      
      if(whichTest == automatic){
        LA_Pos = analogRead(servPotWip);
        //Serial.print("        ");
        //Serial.println(LA_Pos);
        if(LA_Pos > potWipMax){
          linearActuator -> run(RELEASE);
          Serial.println("Maximum actuator position");
          break;
        }
      }
    }
    // if the file isn't open, pop up an error:
    else {
      Serial.println("error opening datalog.txt");
    }
  }
}
